.intel_syntax noprefix

.align 8
.global async_context_save
async_context_save:
    // RIP needs special consideration.
    mov r8, [rsp]
    mov [rdi + 8 * 0], r8

    // RSP needs special consideration.
    lea r8, [rsp + 8]
    mov [rdi + 8 * 1], r8

    mov [rdi + 8 * 2], rbx
    mov [rdi + 8 * 3], rbp
    mov [rdi + 8 * 4], r12
    mov [rdi + 8 * 5], r13
    mov [rdi + 8 * 6], r14
    mov [rdi + 8 * 7], r15

    // Return 1 if we saved the context.
    xor eax, eax
    inc eax
    ret

.align 8
.global async_context_load
async_context_load:
    mov r8,  [rdi + 0 * 8] // RIP
    mov rsp, [rdi + 8 * 1]
    mov rbx, [rdi + 8 * 2]
    mov rbp, [rdi + 8 * 3]
    mov r12, [rdi + 8 * 4]
    mov r13, [rdi + 8 * 5]
    mov r14, [rdi + 8 * 6]
    mov r15, [rdi + 8 * 7]

    push r8 // RIP

    // Return 0 in call to async_context_save if we
    // got there by calling this function.
    xor eax, eax
    ret

.align 8
.global async_context_swap
async_context_swap:
    // Swap RIP with caller and context to swap to
    mov r8, [rsp]
    mov [rdi + 8 * 0], r8

    lea r8, [rsp + 8 * 0]
    mov [rdi + 8 * 1], r8
    mov [rdi + 8 * 2], rbx
    mov [rdi + 8 * 3], rbp
    mov [rdi + 8 * 4], r12
    mov [rdi + 8 * 5], r13
    mov [rdi + 8 * 6], r14
    mov [rdi + 8 * 7], r15

    mov r8, [rsi + 8 * 0]
    mov rsp, [rsi + 8 * 1]
    mov rbx, [rsi + 8 * 2]
    mov rbp, [rsi + 8 * 3]
    mov r12, [rsi + 8 * 4]
    mov r13, [rsi + 8 * 5]
    mov r14, [rsi + 8 * 6]
    mov r15, [rsi + 8 * 7]

    push r8 // RIP

    // Return 0 in call to async_context_save if we
    // got there by calling this function.
    xor eax, eax
    ret
