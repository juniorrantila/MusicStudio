#pragma once
#include "../bs.h"
#include "../Libraries/build.def"

auto const ms_tar = cc_binary("ms-tar", {
    .srcs = {
        "./ms-tar.cpp",
    },
    .compile_flags = {},
    .linker_flags = {},
    .target_triple = {},
    .deps = {
        libraries.cli,
        libraries.main,
        libraries.tar,
    }
});

auto const vst_dump = cc_binary("vst-dump", {
    .srcs = {
        "./vst-dump.cpp",
    },
    .compile_flags = {},
    .linker_flags = {},
    .target_triple = {},
    .deps = {
        libraries.ms,
        libraries.cli,
        libraries.main,
    }
});

auto const list_devices = cc_binary("list-devices", {
    .srcs = {
        "./list-devices.cpp",
    },
    .compile_flags = {},
    .linker_flags = {
#ifdef __APPLE__
    "-F/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/System/Library/Frameworks",
    "-framework", "CoreFoundation",
    "-framework", "CoreAudio",
    "-framework", "AudioUnit",
#endif
    },
    .target_triple = {},
    .deps = {
        libraries.main,
        libraries.soundio,
        libraries.ty,
        libraries.cli,
    }
});

auto const vst_run_gui = cc_binary("vst-run-gui", {
    .srcs = {
        "./vst-run-gui.cpp",
    },
    .compile_flags = {},
    .linker_flags = {
#ifdef __APPLE__
    "-F/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/System/Library/Frameworks",
    "-framework", "AppKit",
    "-framework", "OpenGL",
    "-framework", "CoreFoundation",
    "-framework", "CoreAudio",
    "-framework", "AudioUnit",
#endif
    },
    .target_triple = {},
    .deps = {
        libraries.main,
        libraries.ms,
        libraries.soundio,
        libraries.ty,
        libraries.cli,
        libraries.ui
    }
});

auto const run_wasm_plugin = cc_binary("run-wasm-plugin", {
    .srcs = {
        "./run-wasm-plugin.cpp",
    },
    .compile_flags = {},
    .linker_flags = {},
    .target_triple = {},
    .deps = {
        libraries.ms,
        libraries.cli,
        libraries.main,
    }
});

auto const play_audio = cc_binary("play-audio", {
    .srcs = {
        "./play-audio.cpp",
    },
    .compile_flags = {},
    .linker_flags = {
#ifdef __APPLE__
    "-F/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/System/Library/Frameworks",
    "-framework", "CoreFoundation",
    "-framework", "CoreAudio",
    "-framework", "AudioUnit",
    // FIXME: Remove these
    "-framework", "OpenGL",
    "-framework", "AppKit",
#endif
    },
    .target_triple = {},
    .deps = {
        libraries.main,
        libraries.soundio,
        libraries.ty,
        libraries.cli,
        libraries.au,
        libraries.ms,
        libraries.ui,
    }
});


auto const pipe_audio = cc_binary("pipe-audio", {
    .srcs = {
        "./pipe-audio.cpp",
    },
    .compile_flags = {},
    .linker_flags = {
#ifdef __APPLE__
    "-F/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/System/Library/Frameworks",
    "-framework", "CoreFoundation",
    "-framework", "CoreAudio",
    "-framework", "AudioUnit",
    // FIXME: Remove these
    "-framework", "OpenGL",
    "-framework", "AppKit",
#endif
    },
    .target_triple = {},
    .deps = {
        libraries.main,
        libraries.soundio,
        libraries.ty,
        libraries.cli,
        libraries.au,
        libraries.ms,
    }
});


auto const play_pipe = cc_binary("play-pipe", {
    .srcs = {
        "./play-pipe.cpp",
    },
    .compile_flags = {},
    .linker_flags = {
#ifdef __APPLE__
    "-F/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/System/Library/Frameworks",
    "-framework", "CoreFoundation",
    "-framework", "CoreAudio",
    "-framework", "AudioUnit",
    // FIXME: Remove these
    "-framework", "OpenGL",
    "-framework", "AppKit",
#endif
    },
    .target_triple = {},
    .deps = {
        libraries.main,
        libraries.soundio,
        libraries.ty,
        libraries.cli,
        libraries.au,
    }
});


auto const shadertoy = cc_binary("shadertoy", {
    .srcs = {
        "./shadertoy.cpp",
    },
    .compile_flags = {},
    .linker_flags = {
#ifdef __APPLE__
    "-F/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/System/Library/Frameworks",
    "-framework", "AppKit",
    "-framework", "OpenGL",
    "-framework", "CoreFoundation",
#endif
    },
    .target_triple = {},
    .deps = {
        libraries.main,
        libraries.ty,
        libraries.cli,
        libraries.ui,
        libraries.gl,
        libraries.render,
        libraries.fs,
    }
});


auto const send_file = cc_binary("send-file", {
    .srcs = {
        "./send-file.cpp",
    },
    .compile_flags = {},
    .linker_flags = {},
    .target_triple = {},
    .deps = {
        libraries.main,
        libraries.ty,
        libraries.cli,
    }
});


auto const watchf = cc_binary("watchf", {
    .srcs = {
        "./watchf.cpp",
    },
    .compile_flags = {},
    .linker_flags = {},
    .target_triple = {},
    .deps = {
        libraries.main,
        libraries.ty,
        libraries.cli,
        libraries.fs,
    }
});
