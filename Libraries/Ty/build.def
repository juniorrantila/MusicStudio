#pragma once
#include "../../bs.h"
#include "../Ty2/build.def"

static auto const ty = cc_library("Ty", {
    .srcs = {
        "./ArenaAllocator.cpp",
        "./ByteDecoder.cpp",
        "./Bytes.cpp",
        "./Endian.cpp",
        "./Error.cpp",
        "./Json.cpp",
        "./Memory.cpp",
        "./Parse.cpp",
        "./StringBuffer.cpp",
        "./StringView.cpp",
        "./StringSlice.cpp",
        "./System.cpp",
    },
    .exported_headers = {
        "./Allocator.h",
        "./ArenaAllocator.h",
        "./Assert.h",
        "./Base.h",
        "./ByteBuffer.h",
        "./ByteDecoder.h",
        "./Bytes.h",
        "./CircularQueue.h",
        "./Coder.h",
        "./Concepts.h",
        "./Defer.h",
        "./Endian.h",
        "./Error.h",
        "./ErrorOr.h",
        "./FixedArena.h",
        "./FormatCounter.h",
        "./Formatter.h",
        "./Forward.h",
        "./Hash.h",
        "./IOVec.h",
        "./Id.h",
        "./Json.h",
        "./Limits.h",
        "./LinearMap.h",
        "./Map.h",
        "./Memory.h",
        "./Move.h",
        "./New.h",
        "./Optional.h",
        "./PageAllocator.h",
        "./Parse.h",
        "./Ref.h",
        "./RefPtr.h",
        "./ReverseIterator.h",
        "./ScopeGuard.h",
        "./SegmentedArena.h",
        "./SmallCapture.h",
        "./SmallMap.h",
        "./SmallVector.h",
        "./StaticVector.h",
        "./StringBuffer.h",
        "./StringView.h",
        "./StringSlice.h",
        "./Swap.h",
        "./System.h",
        "./Traits.h",
        "./Try.h",
        "./Type.h",
        "./TypeId.h",
        "./Vector.h",
        "./Verify.h",
        "./View.h",
    },
    .header_namespace = "Ty",
    .compile_flags = {},
    .linker_flags = {},
    .target_triple = {},
    .link_style = "static",
    .deps = {
        ty2,
    },
});
